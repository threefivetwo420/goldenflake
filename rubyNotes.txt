

https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md#ruby



    expression if boolean
        puts "shortIf" if true
        #next example
    boolean ? Do this if true: Do this if false 



                Example class code
                
                
                    class NumData
                      numAry = Array.new
                        @@ranNum = rand(20)
                      @@countr = 0
                      @@dataNum 
                      @@dataNumRT


                      def self.ranNumr
                        @@ranNum
                      end
                      def self.count
                        @@countr
                      end
                      def self.dataCast
                        @@dataNum = rand(6)
                      end
                      def self.dataNumRT
                        @@dataNumRT
                        end
                    end





                    class NumberFill

                      @@rNums
                      def self.aryData 
                        @@rNums
                      end	
                        def numberGen() 
                      puts "this is #{NumData.ranNumr}"
                      @@rNums = Array.new(NumData.ranNumr)
                      puts  "this is array #{@@rNums}"
                     # rNums.each { |x| 
                        #newV = NumData.count + 1
                        #print rNums
                        #}
                        end

                      def arrayFill()
                      end 

                    end
                      object = NumberFill. new
                    object.numberGen()

                    #so now the function will need to fill up the @@rNums[@@ranNum - 1] with random long float, symbol:, Strings, boolean, big integer, file.

                    # so this would basically use a genrated random number to set off different function for a type of data to be stored in the array



                    puts "\n\n dataCast \n ------- \n Try1 :#{NumData.dataCast} \n Try2: #{NumData.dataCast} \n Try3: #{NumData.dataCast} \n Try4: #{NumData.dataCast} \n Try5: #{NumData.dataCast} \n Try6: #{NumData.dataCast} \n"


                    #object = NumData. new
                    #object.dataCast()

                    #define 0=longfloat 
                      #length of array is loopStop??
                        #array index ranNumr - 1
                      def writeInData(integer,countr,loopStop)
                        while countr <= loopStop	
                        if	integer == 0 
                          NumberFill.aryData[countr] = rand()
                          puts "#{NumberFill.aryData}"
                          countr = countr + 1
                        end
                         if 
                           #countr would have to increase outisde of the writeInData() so that the index would not be messed with
                         end
                      end

                        writeInData(NumData.dataCast,NumData.count)


                        #writeInData would need to write the data into the array which was made with a random amount of index, write in data would only have 6 if clauses because the 6 data types would be run a random amount of times which would write all 6 data types possible to every index in the array. the control for the loop is stopping at random number - 1 and is starting at 0 so 0 is being checked against random number - 1 while counter 0 <= rn -1 then the loop will continue checking each randomly generated data type 1-6 or 0-5 should it be rand(5) + 1 since this is 1-6 no zero to avoid an empty array, like wise the rand(19) + 1 should be added as well to remove the 0 from the array possibilities. So what goes into the function is random number - 1, counter=0, data type random number. at the end of the while loop since it runs until counter is greater than random number - 1 meanwhile indexing the array, which won't quite set a new value for the incoming random data type. so the other variable should be handled outside of the loop where, when the while loop starts it should test the incoming data but also set off a new random number.  

    #so if countrFake != countr && integer == dataRan 
    	#run the new dataRan function
    #this should be run on one line
    
    #so if 0 == countr Do dataRan function




        Conditional Assignment Operator
                ||=
                which will assign a value only if a value has not already been assigned to a variable
                


           Assignment Operators
                && for both condition to be true
                || for one or the other other to be true





using the .upto .downto functions or loops

        exmaple 
            95.upto


https://arxiv.org/
https://arxiv.org/abs/0805.1079?context=physics
https://phet.colorado.edu/en/simulations/category/physics/electricity-magnets-and-circuits


